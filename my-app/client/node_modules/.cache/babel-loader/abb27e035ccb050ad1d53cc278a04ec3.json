{"ast":null,"code":"var _jsxFileName = \"/Users/sviatoslav/Documents/Project3/Timekeeper/my-app/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\n// Provider Global Store import\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from '../../utils/helpers';\n\n// setCategory  was used before adding our handleclick\n//function CategoryMenu({ setCategory }) {\n// therefore it can be removed from the prop as we are using the \n// global sate\n\nfunction CategoryMenu(_ref) {\n  let {} = _ref;\n  // Before migrating to use global Store\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector(state => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const {\n    categories\n  } = state;\n  // loading will be used for offline capabilities\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      // also add to indexDB\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      console.log(\"I am offline\");\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [loading, categoryData, dispatch]);\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  // on click before global state was setCategory(item._id);\n  // now is handleClick(item._id);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\nexport default CategoryMenu;","map":{"version":3,"names":["React","useEffect","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","useDispatch","useSelector","idbPromise","CategoryMenu","_ref","state","dispatch","categories","loading","data","categoryData","type","forEach","category","console","log","then","handleClick","id","currentCategory","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","item","key","_id","onClick","name"],"sources":["/Users/sviatoslav/Documents/Project3/Timekeeper/my-app/client/src/components/CategoryMenu/index.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n\n// Provider Global Store import\n// commented out in favor of redux logic\n//import { useStoreContext } from \"../../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import IndexDB helper which will allow the app to talk\n// to the database\nimport { idbPromise } from '../../utils/helpers';\n\n// setCategory  was used before adding our handleclick\n//function CategoryMenu({ setCategory }) {\n// therefore it can be removed from the prop as we are using the \n// global sate\n\nfunction CategoryMenu({}) {\n  // Before migrating to use global Store\n  //const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  //const categories = categoryData?.categories || [];\n\n  // commented out in favor of redux logic\n  //const [state, dispatch] = useStoreContext();\n  const state = useSelector((state) => {\n    return state\n  });\n  const dispatch = useDispatch();\n\n  const { categories } = state;\n  // loading will be used for offline capabilities\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      // also add to indexDB\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      console.log(\"I am offline\")\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n\n    }\n  }, [loading, categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  // on click before global state was setCategory(item._id);\n  // now is handleClick(item._id);\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,iBAAiB,EAAEC,uBAAuB,QAAQ,qBAAqB;AAChF,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,gBAAgB,QAAQ,qBAAqB;;AAEtD;AACA;AACA;AACA,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;;AAEtD;AACA;AACA,SAASC,UAAU,QAAQ,qBAAqB;;AAEhD;AACA;AACA;AACA;;AAEA,SAASC,YAAYA,CAAAC,IAAA,EAAK;EAAA,IAAJ,CAAC,CAAC,GAAAA,IAAA;EACtB;EACA;EACA;;EAEA;EACA;EACA,MAAMC,KAAK,GAAGJ,WAAW,CAAEI,KAAK,IAAK;IACnC,OAAOA,KAAK;EACd,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAE9B,MAAM;IAAEO;EAAW,CAAC,GAAGF,KAAK;EAC5B;EACA,MAAM;IAAEG,OAAO;IAAEC,IAAI,EAAEC;EAAa,CAAC,GAAGZ,QAAQ,CAACC,gBAAgB,CAAC;EAElEJ,SAAS,CAAC,MAAM;IACd;IACA,IAAIe,YAAY,EAAE;MAChB;MACAJ,QAAQ,CAAC;QACPK,IAAI,EAAEf,iBAAiB;QACvBW,UAAU,EAAEG,YAAY,CAACH;MAC3B,CAAC,CAAC;MACF;MACAG,YAAY,CAACH,UAAU,CAACK,OAAO,CAACC,QAAQ,IAAI;QAC1CX,UAAU,CAAC,YAAY,EAAE,KAAK,EAAEW,QAAQ,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAACL,OAAO,EAAE;MACnBM,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3Bb,UAAU,CAAC,YAAY,EAAE,KAAK,CAAC,CAACc,IAAI,CAACT,UAAU,IAAI;QACjDD,QAAQ,CAAC;UACPK,IAAI,EAAEf,iBAAiB;UACvBW,UAAU,EAAEA;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;IAEJ;EACF,CAAC,EAAE,CAACC,OAAO,EAAEE,YAAY,EAAEJ,QAAQ,CAAC,CAAC;EAErC,MAAMW,WAAW,GAAGC,EAAE,IAAI;IACxBZ,QAAQ,CAAC;MACPK,IAAI,EAAEd,uBAAuB;MAC7BsB,eAAe,EAAED;IACnB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA;;EAEA,oBACExB,KAAA,CAAA0B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEhC,KAAA,CAAA0B,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,oBAAsB,CAAC,EAC1BnB,UAAU,CAACoB,GAAG,CAACC,IAAI,iBAClBlC,KAAA,CAAA0B,aAAA;IACES,GAAG,EAAED,IAAI,CAACE,GAAI;IACdC,OAAO,EAAEA,CAAA,KAAM;MACbd,WAAW,CAACW,IAAI,CAACE,GAAG,CAAC;IACvB,CAAE;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEDE,IAAI,CAACI,IACA,CACT,CACE,CAAC;AAEV;AAEA,eAAe7B,YAAY"},"metadata":{},"sourceType":"module"}