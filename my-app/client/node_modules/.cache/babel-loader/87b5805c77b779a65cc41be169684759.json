{"ast":null,"code":"// commented out in favor of redux logic\n//import { useReducer } from 'react';\n\n// actions to take\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories]\n      };\n    // if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new string instead of an array\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      };\n    // UI Cart case\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n    // add multiple to cart\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products]\n      };\n    // Remove from cart\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        })\n      };\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    // if no changes, leave as default values\n    default:\n      return state;\n  }\n};\nexport default reducer;\n\n// commented out in favor of redux logic\n// export function useProductReducer(initialState) {\n//   return useReducer(reducer, initialState);\n// }","map":{"version":3,"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","defaultState","products","cart","cartOpen","categories","currentCategory","reducer","state","arguments","length","undefined","action","type","product","newState","filter","_id","map","purchaseQuantity"],"sources":["/Users/sviatoslav/Documents/Project3/Timekeeper/my-app/client/src/utils/reducers.js"],"sourcesContent":["// commented out in favor of redux logic\n//import { useReducer } from 'react';\n\n// actions to take\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nconst defaultState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: '',\n}\n  \n  const reducer = (state=defaultState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n            ...state,\n            products: [...action.products]\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n            ...state,\n            categories: [...action.categories]\n            };\n        // if action type value is the value of `UPDATE_CURRENT_CATEGORY`, return a new string instead of an array\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        // UI Cart case\n        case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n          };\n        // add multiple to cart\n        case ADD_MULTIPLE_TO_CART:\n          return {\n            ...state,\n            cart: [...state.cart, ...action.products],\n          };\n        // Remove from cart\n        case REMOVE_FROM_CART:\n          let newState = state.cart.filter(product => {\n            return product._id !== action._id;\n          });\n        \n          return {\n            ...state,\n            cartOpen: newState.length > 0,\n            cart: newState\n          };\n        case UPDATE_CART_QUANTITY:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: state.cart.map(product => {\n              if (action._id === product._id) {\n                product.purchaseQuantity = action.purchaseQuantity;\n              }\n              return product;\n            })\n          };\n\n        case CLEAR_CART:\n          return {\n            ...state,\n            cartOpen: false,\n            cart: []\n          };\n        \n        case TOGGLE_CART:\n          return {\n            ...state,\n            cartOpen: !state.cartOpen\n          };\n  \n          // if no changes, leave as default values\n      default:\n        return state;\n    }\n  };\n\n\n  export default reducer;\n\n  // commented out in favor of redux logic\n  // export function useProductReducer(initialState) {\n  //   return useReducer(reducer, initialState);\n  // }"],"mappings":"AAAA;AACA;;AAEA;AACA,SACEA,eAAe,EACfC,iBAAiB,EACjBC,uBAAuB,EACvBC,WAAW,EACXC,oBAAoB,EACpBC,gBAAgB,EAChBC,oBAAoB,EACpBC,UAAU,EACVC,WAAW,QACN,WAAW;AAElB,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE;AACnB,CAAC;AAEC,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAgC;EAAA,IAA/BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAACR,YAAY;EAAA,IAAEW,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACzC,QAAQC,MAAM,CAACC,IAAI;IACf;IACA,KAAKrB,eAAe;MAChB,OAAO;QACP,GAAGgB,KAAK;QACRN,QAAQ,EAAE,CAAC,GAAGU,MAAM,CAACV,QAAQ;MAC7B,CAAC;IACL;IACA,KAAKT,iBAAiB;MAClB,OAAO;QACP,GAAGe,KAAK;QACRH,UAAU,EAAE,CAAC,GAAGO,MAAM,CAACP,UAAU;MACjC,CAAC;IACL;IACA,KAAKX,uBAAuB;MACxB,OAAO;QACH,GAAGc,KAAK;QACRF,eAAe,EAAEM,MAAM,CAACN;MAC5B,CAAC;IACL;IACA,KAAKX,WAAW;MACd,OAAO;QACL,GAAGa,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAES,MAAM,CAACE,OAAO;MACtC,CAAC;IACH;IACA,KAAKlB,oBAAoB;MACvB,OAAO;QACL,GAAGY,KAAK;QACRL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAE,GAAGS,MAAM,CAACV,QAAQ;MAC1C,CAAC;IACH;IACA,KAAKL,gBAAgB;MACnB,IAAIkB,QAAQ,GAAGP,KAAK,CAACL,IAAI,CAACa,MAAM,CAACF,OAAO,IAAI;QAC1C,OAAOA,OAAO,CAACG,GAAG,KAAKL,MAAM,CAACK,GAAG;MACnC,CAAC,CAAC;MAEF,OAAO;QACL,GAAGT,KAAK;QACRJ,QAAQ,EAAEW,QAAQ,CAACL,MAAM,GAAG,CAAC;QAC7BP,IAAI,EAAEY;MACR,CAAC;IACH,KAAKjB,oBAAoB;MACvB,OAAO;QACL,GAAGU,KAAK;QACRJ,QAAQ,EAAE,IAAI;QACdD,IAAI,EAAEK,KAAK,CAACL,IAAI,CAACe,GAAG,CAACJ,OAAO,IAAI;UAC9B,IAAIF,MAAM,CAACK,GAAG,KAAKH,OAAO,CAACG,GAAG,EAAE;YAC9BH,OAAO,CAACK,gBAAgB,GAAGP,MAAM,CAACO,gBAAgB;UACpD;UACA,OAAOL,OAAO;QAChB,CAAC;MACH,CAAC;IAEH,KAAKf,UAAU;MACb,OAAO;QACL,GAAGS,KAAK;QACRJ,QAAQ,EAAE,KAAK;QACfD,IAAI,EAAE;MACR,CAAC;IAEH,KAAKH,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRJ,QAAQ,EAAE,CAACI,KAAK,CAACJ;MACnB,CAAC;;IAED;IACJ;MACE,OAAOI,KAAK;EAChB;AACF,CAAC;AAGD,eAAeD,OAAO;;AAEtB;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}