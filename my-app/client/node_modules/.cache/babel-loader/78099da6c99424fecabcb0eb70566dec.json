{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    /*\n      So now whenever we run this idbPromise() function,\n      we establish a connection to the database. Remember\n      that with IndexedDB, the .onupgradeneeded() event\n      only runs if the browser notices that the version\n      number in the .open() method has changed since the\n      last time, or if the browser has never connected\n      to the database before and 1 is the new version.\n      Any other time this code executes and the version \n      is still 1, the .onupgradeneeded() will not run.\n    */\n    request.onupgradeneeded = function (e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('categories', {\n        keyPath: '_id'\n      });\n      db.createObjectStore('cart', {\n        keyPath: '_id'\n      });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function (e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function (e) {\n        console.log('error', e);\n      };\n\n      /*\n      check which value we passed into the function as a method and perform \n      that method on the object store:\n      */\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"sources":["/Users/sviatoslav/Documents/Project3/Timekeeper/my-app/client/src/utils/helpers.js"],"sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\n\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    /*\n      So now whenever we run this idbPromise() function,\n      we establish a connection to the database. Remember\n      that with IndexedDB, the .onupgradeneeded() event\n      only runs if the browser notices that the version\n      number in the .open() method has changed since the\n      last time, or if the browser has never connected\n      to the database before and 1 is the new version.\n      Any other time this code executes and the version \n      is still 1, the .onupgradeneeded() will not run.\n    */\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n            \n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n  \n      // if there's any errors, let us know\n      db.onerror = function(e) {\n      console.log('error', e);\n      };\n\n      /*\n      check which value we passed into the function as a method and perform \n      that method on the object store:\n      */\n  \n      switch (method) {\n          case 'put':\n            store.put(object);\n            resolve(object);\n            break;\n          case 'get':\n            const all = store.getAll();\n            all.onsuccess = function() {\n              resolve(all.result);\n            };\n            break;\n          case 'delete':\n            store.delete(object._id);\n            break;\n          default:\n            console.log('No valid method');\n            break;\n        }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n      db.close();\n      };\n    };\n\n  });\n}"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACrC,IAAIA,KAAK,KAAK,CAAC,EAAE;IACf,OAAOD,IAAI;EACb;EACA,OAAOA,IAAI,GAAG,GAAG;AACnB;AAIA,OAAO,SAASE,UAAUA,CAACC,SAAS,EAAEC,MAAM,EAAEC,MAAM,EAAE;EACpD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,SAAS,CAACC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;;IAErD;IACA,IAAIC,EAAE,EAAEC,EAAE,EAAEC,KAAK;;IAEjB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIN,OAAO,CAACO,eAAe,GAAG,UAASC,CAAC,EAAE;MACpC,MAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAM;MACzB;MACAL,EAAE,CAACM,iBAAiB,CAAC,UAAU,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACpDP,EAAE,CAACM,iBAAiB,CAAC,YAAY,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;MACtDP,EAAE,CAACM,iBAAiB,CAAC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IAClD,CAAC;;IAED;IACAX,OAAO,CAACY,OAAO,GAAG,UAASJ,CAAC,EAAE;MAC5BK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC;;IAED;IACAd,OAAO,CAACe,SAAS,GAAG,UAASP,CAAC,EAAE;MAE9B;MACAJ,EAAE,GAAGJ,OAAO,CAACS,MAAM;MACnB;MACAJ,EAAE,GAAGD,EAAE,CAACY,WAAW,CAACtB,SAAS,EAAE,WAAW,CAAC;MAC3C;MACAY,KAAK,GAAGD,EAAE,CAACY,WAAW,CAACvB,SAAS,CAAC;;MAEjC;MACAU,EAAE,CAACQ,OAAO,GAAG,UAASJ,CAAC,EAAE;QACzBK,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEN,CAAC,CAAC;MACvB,CAAC;;MAED;AACN;AACA;AACA;;MAEM,QAAQb,MAAM;QACV,KAAK,KAAK;UACRW,KAAK,CAACY,GAAG,CAACtB,MAAM,CAAC;UACjBE,OAAO,CAACF,MAAM,CAAC;UACf;QACF,KAAK,KAAK;UACR,MAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAM,CAAC,CAAC;UAC1BD,GAAG,CAACJ,SAAS,GAAG,YAAW;YACzBjB,OAAO,CAACqB,GAAG,CAACV,MAAM,CAAC;UACrB,CAAC;UACD;QACF,KAAK,QAAQ;UACXH,KAAK,CAACe,MAAM,CAACzB,MAAM,CAAC0B,GAAG,CAAC;UACxB;QACF;UACET,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B;MACJ;;MAEF;MACAT,EAAE,CAACkB,UAAU,GAAG,YAAW;QAC3BnB,EAAE,CAACoB,KAAK,CAAC,CAAC;MACV,CAAC;IACH,CAAC;EAEH,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module"}